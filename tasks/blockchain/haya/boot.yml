---

- name: "Make directory structure"
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ bc_path_data }}"
    - "{{ bc_path_config }}"
    - "{{ bc_path_state }}"

- name: set config.ini
  vars:
    producer_name: "{{ bc_haya_boot.name }}"
    producer_pub_key: "{{ bc_haya_boot.pub_key }}"
    producer_pvt_key: "{{ bc_haya_boot.pvt_key }}"
  template:
    src: configs/nodeos/config.ini.j2
    dest: "{{ bc_path_config }}/config.ini"

- name: set genesis.json
  template:
    src: configs/nodeos/genesis.json.j2
    dest: "{{ bc_path_config }}/genesis.json"

- name: set logger.json
  tags:
    - update
  template:
    src: configs/nodeos/logger.json.j2
    dest: "{{ bc_path_config }}/logger.json"

- debug:
    var: "{{ item }}"
  with_items:
    - bc_haya_node_http_port
    - bc_haya_node_p2p_port
    - bc_haya_node_bnet_port
  tags:
    - never
    - debug

- name: Start boot-node container
  register: _start_boot_node
  docker_container:
    name: "{{ bc_name }}-{{ bc_component_name }}"
    image: "{{ bc_haya_image }}"
    command: |
      /opt/haya/bin/haya-node
      --config-dir={{ bc_path_config }}
      --genesis-json={{ bc_path_config }}/genesis.json
      --logconf={{ bc_path_config }}/logger.json
    hostname: "{{ bc_name }}-{{ bc_component_name }}"
    network_mode: host
    volumes:
      - "{{ bc_path_state }}:/root/.local"
      - "{{ bc_path_config }}:{{ bc_path_config }}"
      - "/tmp/cores:/tmp/cores"
    capabilities:
      - IPC_LOCK
    stop_timeout: 600
    pull: true
    log_options:
      max-size: "1g"

- name: "Waiting"
  pause:
    seconds: 25
  when:
    - _start_boot_node is changed

- debug:
    var: "{{ item }}"
  with_items:
    - producer_account.pvt_key
  tags:
    - never
    - debug

- name: import bootstrap producer key into wallet
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    wallet import --private-key {{ bc_haya_boot.pvt_key }}
    touch {{ bc_path_state }}/importbootkey
  args:
    creates: "{{ bc_path_state }}/importbootkey"
  register: import_producer_key
  ignore_errors: true
#  failed_when: "('Nonexistent wallet' in import_producer_key.stderr or 'Key already exists' not in import_producer_key.stderr) and import_producer_key.rc != 0"
#  changed_when: "'imported private key for' in import_producer_key.stdout"

- debug:
    msg: "{{ import_producer_key.stderr_lines }}"
  tags:
    - never
    - debug
- debug: var=import_producer_key.stdout_lines
  tags:
    - never
    - debug

- name: import all producer key into wallet
  loop: "{{ bc_haya_producer_accounts }}"
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    wallet import --private-key {{ item.pvt_key }}
    touch {{ bc_path_state }}/importprodkeys-{{ item.name }}
  args:
    creates: "{{ bc_path_state }}/importprodkeys-{{ item.name }}"
  register: import_all_producer_key
  ignore_errors: true
#  failed_when: "('Nonexistent wallet' in import_all_producer_key.stderr or 'Key already exists' not in import_all_producer_key.stderr) and import_all_producer_key.rc != 0"
#  changed_when: "'imported private key for' in import_all_producer_key.stdout"
  when: bc_peers_ip|length > index + 1
  loop_control:
    index_var: index

- name: create system accounts
  loop: "{{ bc_haya_system_accounts }}"
  register: create_system_accounts
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    create account -x 45 eosio {{ item }} {{ bc_haya_boot.pub_key }} {{ bc_haya_boot.pub_key }}
    touch {{ bc_path_state }}/createsysacc-{{ item }}
  args:
    creates: "{{ bc_path_state }}/createsysacc-{{ item }}"
#  failed_when: "('Account name already exists' not in create_system_accounts.stderr) and create_system_accounts.rc != 0"
  changed_when: "'executed transaction' in create_system_accounts.stdout"


- name: Show stderr from create system accounts task
  debug:
    msg: "DEBUG: \n stderr:{{ item.stderr }}\n stdout:{{ item.stdout }}"
  loop: "{{ create_system_accounts.results }}"
  tags:
    - never
    - debug

- name: copy contracts
  copy:
    src: contracts/
    dest: "{{ bc_path_contracts }}"

- name: set abi system contracts
  loop: "{{ bc_haya_system_contracts }}"
  register: set_abi_system_contracts
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    set abi {{ item.name }} /host/{{ bc_path_contracts }}/{{ item.abi_path }}
    touch {{ bc_path_state }}/setabisyscontracts-{{ item.name }}
  args:
    chdir: "{{ bc_path_contracts }}"
    creates: "{{ bc_path_state }}/setabisyscontracts-{{ item.name }}"
#  failed_when: "('already exists' not in set_abi_system_contracts.stderr) and set_abi_system_contracts.rc != 0"
#  changed_when: "'Setting ABI' in set_abi_system_contracts.stdout"

- name: Show stderr from set abi system contracts task
  debug:
    msg: "DEBUG: \n stderr:{{ item.stderr }}\n stdout:{{ item.stdout }}"
  loop: "{{ set_abi_system_contracts.results }}"
  tags:
    - never
    - debug

- name: set code system contracts
  loop: "{{ bc_haya_system_contracts }}"
  register: set_code_system_contracts
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    set code {{ item.name }} /host/{{ bc_path_contracts }}/{{ item.wasm_path }}
    touch {{ bc_path_state }}/setcodesyscontracts-{{ item.name }}
  args:
    chdir: "{{ bc_path_contracts }}"
    creates: "{{ bc_path_state }}/setcodesyscontracts-{{ item.name }}"
#  failed_when: "('already exists' not in set_code_system_contracts.stderr) and set_code_system_contracts.rc != 0"
#  changed_when: "'Setting Code' in set_code_system_contracts.stdout"

- name: Show stderr from set code system contracts task
  debug:
    msg: "DEBUG: \n stderr:{{ item.stderr }}\n stdout:{{ item.stdout }}"
  loop: "{{ set_code_system_contracts.results }}"
  tags:
    - never
    - debug

- name: create token
  register: create_token
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    push action eosio.token create '[\"eosio\", \"{{ bc_haya_tokens_amount }} \
    BET\"]' -p eosio.token
    touch {{ bc_path_state }}/createtoken
  args:
    creates: "{{ bc_path_state }}/createtoken"
#  failed_when: "('already exists' not in create_token.stderr) and create_token.rc != 0"
#  changed_when: "'executed transaction' in create_token.stdout"

- name: Show stderr from create token task
  debug:
    msg: "DEBUG: \n stderr:{{ create_token.stderr }}\n stdout:{{ create_token.stdout }}"
  tags:
    - never
    - debug

- name: allocate tokens
  register: allocate_tokens
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    push action eosio.token issue '[\"eosio\", \"{{ bc_haya_tokens_amount }}
    BET\", \"memo\"]' -p eosio
    touch {{ bc_path_state }}/allocatetokens
  args:
    creates: "{{ bc_path_state }}/allocatetokens"
#  failed_when: "('quantity exceeds available supply' not in allocate_tokens.stderr) and allocate_tokens.rc != 0"
#  changed_when: "'executed transaction' in allocate_tokens.stdout"

- name: Show stderr from allocate tokens task
  debug:
    msg: "DEBUG: \n stderr:{{ allocate_tokens.stderr }}\n stdout:{{ allocate_tokens.stdout }}"
  tags:
    - never
    - debug

- name: Init system contracts
  register: init_system_contracts
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    push action eosio init '[0,\"4,BET\"]' -p eosio
    touch {{ bc_path_state }}/initsyscontracts-eosio
  args:
    creates: "{{ bc_path_state }}/initsyscontracts-eosio"
    chdir: "{{ bc_path_contracts }}"
#  failed_when: "('system contract has already been initialized' not in init_system_contracts.stderr) and init_system_contracts.rc != 0"
#  changed_when: "'Setting Code' in init_system_contracts.stdout"

- name: Show stderr from init system contracts task
  debug:
    msg: "DEBUG: \n stderr:{{ item.stderr }}\n stdout:{{ item.stdout }}"
  loop: "{{ init_system_contracts.results }}"
  tags:
    - never
    - debug


- name: create producers account
  loop: "{{ bc_haya_producer_accounts }}"
  register: create_producers_account
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    system newaccount -x 45 eosio --transfer {{ item.name }} \
    {{ item.pub_key }} --stake-net \"2500000000.0000 BET\" \
    --stake-cpu \"2500000000.0000 BET\" --buy-ram-kbytes 8192
    touch {{ bc_path_state }}/createprodacc-{{ item.name }}
  args:
    creates: "{{ bc_path_state }}/createprodacc-{{ item.name }}"
#  failed_when: "('Account name already exists' not in create_producers_account.stderr) and create_producers_account.rc != 0"
#  changed_when: "'executed transaction' in create_producers_account.stdout"
  retries: 5
  delay: 3
  until: create_producers_account is success
  when: bc_peers_ip|length > index + 1
  loop_control:
    index_var: index

- name: Show stderr from create producers account task
  debug:
    msg: "DEBUG: \n stderr:{{ item.stderr }}\n stdout:{{ item.stdout }}"
  loop: "{{ create_producers_account.results }}"
  tags:
    - never
    - debug

- name: Reg producers account
  loop: "{{ bc_haya_producer_accounts }}"
  register: reg_producers_account
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    system regproducer {{ item.name }} {{ item.pub_key }} -p {{ item.name }}
    touch {{ bc_path_state }}/regprodacc-{{ item.name }}
  args:
    creates: "{{ bc_path_state }}/regprodacc-{{ item.name }}"
#  failed_when: "('Account name already exists' not in reg_producers_account.stderr) and reg_producers_account.rc != 0"
#  changed_when: "'executed transaction' in reg_producers_account.stdout"
  when: bc_peers_ip|length > index + 1
  loop_control:
    index_var: index

- name: Vote producers account
  loop: "{{ bc_haya_producer_accounts }}"
  register: vote_producers_account
  shell: |
    {{ bc_haya_cli }} \
    --wallet-url=http://localhost:{{ bc_haya_wallet.port }} \
    --url=http://localhost:{{ bc_haya_node_http_port }} \
    system voteproducer prods {{ item.name }} {{ item.name }}
    touch {{ bc_path_state }}/voteprodacc-{{ item.name }}
  args:
    creates: "{{ bc_path_state }}/voteprodacc-{{ item.name }}"
#  failed_when: "('Account name already exists' not in vote_producers_account.stderr) and vote_producers_account.rc != 0"
#  changed_when: "'executed transaction' in vote_producers_account.stdout"
  when: bc_peers_ip|length > index + 1
  loop_control:
    index_var: index
